## üê≥ Gu√≠a r√°pida: Dockerfile para microservicios Spring Boot

### Estructura est√°ndar de un `Dockerfile` multietapa

```Dockerfile
# ============================
# Etapa 1: Construcci√≥n del proyecto
# ============================
FROM maven:3.8.7-eclipse-temurin-17 AS build

# Directorio de trabajo dentro del contenedor temporal
WORKDIR /app

# Copiamos todo el contenido del proyecto (c√≥digo + pom.xml)
COPY . .

# Compilamos el proyecto sin ejecutar pruebas
RUN mvn clean package -DskipTests

# ============================
# Etapa 2: Imagen final ligera de ejecuci√≥n
# ============================
FROM eclipse-temurin:17-jdk-alpine

WORKDIR /app

# Copiamos el .jar compilado
COPY --from=build /app/target/*.jar app.jar

# Copiamos recursos adicionales necesarios en tiempo de ejecuci√≥n (ej: base de datos SQLite)
COPY --from=build /app/src/main/resources/db ./src/main/resources/db

# Exponemos el puerto que Spring Boot usa por defecto
EXPOSE 8080

# Comando de ejecuci√≥n
ENTRYPOINT ["java", "-jar", "app.jar"]
```

### D√≥nde obtener los datos del Dockerfile:

* Imagen base Maven: [https://hub.docker.com/\_/maven](https://hub.docker.com/_/maven)
* Imagen base Java (Temurin): [https://hub.docker.com/\_/eclipse-temurin](https://hub.docker.com/_/eclipse-temurin)
* Verifica la versi√≥n Java en tu `pom.xml` o `mvn -v`
* Aseg√∫rate de copiar recursos necesarios (como DB o archivos .properties) si no est√°n embebidos

---

## üìÉ application.properties en Spring Boot

```properties
# Nombre de la aplicaci√≥n
spring.application.name=northwind-service

# URL de conexi√≥n a la base de datos SQLite
spring.datasource.url=jdbc:sqlite:src/main/resources/db/sqlite_northwind.db
spring.datasource.driver-class-name=org.sqlite.JDBC

# Configuraci√≥n de JPA (Hibernate)
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database-platform=com.hiram.northwind.config.SQLiteDialect
spring.jpa.show-sql=true

# Estrategia de nombres en BD (opcional)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Spring Security b√°sico (opcional en dev)
spring.security.user.name=admin
spring.security.user.password=admin
```

### D√≥nde buscar:

* Dialectos de Hibernate: [https://docs.jboss.org/hibernate/orm](https://docs.jboss.org/hibernate/orm)
* Drivers JDBC: [https://mvnrepository.com](https://mvnrepository.com)
* Configuraciones Spring Boot: [https://docs.spring.io/spring-boot](https://docs.spring.io/spring-boot)

---

## üìä Comandos Docker esenciales

### ‚úÖ Crear imagen

```bash
docker build -t nombre-imagen .
```

### ‚ñ∂Ô∏è Ejecutar contenedor

```bash
docker run -d -p 8080:8080 --name nombre-contenedor nombre-imagen
```

### üìå Ver contenedores activos

```bash
docker ps
```

### üîé Ver todos los contenedores (incluso apagados)

```bash
docker ps -a
```

### ‚ùå Eliminar contenedor

```bash
docker rm -f nombre-contenedor
```

### ‚ôªÔ∏è Eliminar imagen

```bash
docker rmi nombre-imagen
```

### üåü Ver logs en tiempo real

```bash
docker logs -f nombre-contenedor
```

### ‚öôÔ∏è Acceder al contenedor

```bash
docker exec -it nombre-contenedor bash
```

---

## üîß Buenas pr√°cticas:

* Nombra bien tus `Dockerfile` e imagenes.
* Elimina contenedores o imagenes antiguas para no saturar tu disco.
* Verifica rutas relativas que usas en tu aplicaci√≥n (por ejemplo en SQLite).
* Usa `.dockerignore` para evitar copiar archivos innecesarios (como `/target` o `.git`).

---

¬°Listo para usar como plantilla y referencia! ‚úÖ

